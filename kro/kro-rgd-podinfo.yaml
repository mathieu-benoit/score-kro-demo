apiVersion: kro.run/v1alpha1
kind: ResourceGraphDefinition
metadata:
  name: podinfo-app
spec:
  schema:
    apiVersion: v1alpha1
    kind: Podinfo
    spec:
      name:            string  | required=true
      namespace:       string  | default="test"
      replicas:        integer | default=2 minimum=1
      image:           string  | default="ghcr.io/stefanprodan/podinfo:6.9.2"
      imagePullPolicy: string  | default="IfNotPresent"

      # Env (scalars only)
      uiColor:         string  | default="#34577c"
      backendURL:      string  | default="http://backend-podinfo:9898/echo"

      # Ports (scalars)
      httpPort:        integer | default=9898
      metricsPort:     integer | default=9797
      grpcPort:        integer | default=9999

      # Optional HTTPRoute (boolean + strings)
      createHTTPRoute: boolean | default=false
      hostname:        string  | required=false
      routePath:       string  | default="/"
      gatewayName:     string  | default="default"

    status:
      deploymentConditions: ${deployment.status.conditions}
      availableReplicas:    ${deployment.status.availableReplicas}
      serviceClusterIP:     ${service.spec.clusterIP}
      routeParents:         ${httpRoute.status.parents}

  resources:

    - id: appNamespace
      template:
        apiVersion: v1
        kind: Namespace
        metadata:
          name: ${schema.spec.namespace}

    - id: deployment
      template:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name:      ${schema.spec.name}
          namespace: ${appNamespace.metadata.name}
          labels:
            app.kubernetes.io/name: ${schema.spec.name}
        spec:
          replicas: ${schema.spec.replicas}
          selector:
            matchLabels:
              app.kubernetes.io/name: ${schema.spec.name}
          strategy:
            type: RollingUpdate
            rollingUpdate:
              maxSurge: 25%
              maxUnavailable: 1
          template:
            metadata:
              labels:
                app.kubernetes.io/name: ${schema.spec.name}
              annotations:
                prometheus.io/scrape: "true"
                prometheus.io/port:   ${string(schema.spec.httpPort)
            spec:
              volumes:
                - name: data
                  emptyDir: {}
              containers:
                - name: podinfo
                  image: ${schema.spec.image}
                  imagePullPolicy: ${schema.spec.imagePullPolicy}
                  command: ["./podinfo"]
                  args:
                    - --port=${schema.spec.httpPort}
                    - --cert-path=/data/cert
                    - --port-metrics=${schema.spec.metricsPort}
                    - --grpc-port=${schema.spec.grpcPort}
                    - --grpc-service-name=podinfo
                    - --level=info
                    - --random-delay=false
                    - --random-error=false
                  env:
                    - name: PODINFO_UI_COLOR
                      value: ${schema.spec.uiColor}
                    - name: PODINFO_BACKEND_URL
                      value: ${schema.spec.backendURL}
                  ports:
                    - name: http
                      containerPort: ${schema.spec.httpPort}
                      protocol: TCP
                    - name: http-metrics
                      containerPort: ${schema.spec.metricsPort}
                      protocol: TCP
                    - name: grpc
                      containerPort: ${schema.spec.grpcPort}
                      protocol: TCP
                  resources:
                    requests:
                      cpu: "1m"
                      memory: "16Mi"
                  volumeMounts:
                    - name: data
                      mountPath: /data
                  livenessProbe:
                    exec:
                      command: ["podcli","check","http","localhost:${schema.spec.httpPort}/healthz"]
                    initialDelaySeconds: 1
                    periodSeconds: 10
                    timeoutSeconds: 5
                    failureThreshold: 3
                    successThreshold: 1
                  readinessProbe:
                    exec:
                      command: ["podcli","check","http","localhost:${schema.spec.httpPort}/readyz"]
                    initialDelaySeconds: 1
                    periodSeconds: 10
                    timeoutSeconds: 5
                    failureThreshold: 3
                    successThreshold: 1

    - id: service
      template:
        apiVersion: v1
        kind: Service
        metadata:
          name:      ${schema.spec.name}
          namespace: ${appNamespace.metadata.name}
          labels:
            app.kubernetes.io/name: ${schema.spec.name}
        spec:
          selector:
            app.kubernetes.io/name: ${schema.spec.name}
          type: ClusterIP
          ports:
            - name: http
              port:       ${schema.spec.httpPort}
              protocol:   TCP
              targetPort: http
            - name: grpc
              port:       ${schema.spec.grpcPort}
              protocol:   TCP
              targetPort: grpc

    - id: httpRoute
      includeWhen:
        - ${schema.spec.createHTTPRoute}
      template:
        apiVersion: gateway.networking.k8s.io/v1
        kind: HTTPRoute
        metadata:
          name:      ${schema.spec.name}
          namespace: ${appNamespace.metadata.name}
        spec:
          hostnames:
            - ${schema.spec.hostname}
          parentRefs:
            - group: gateway.networking.k8s.io
              kind: Gateway
              name: ${schema.spec.gatewayName}
          rules:
            - matches:
                - path:
                    type: PathPrefix
                    value: ${schema.spec.routePath}
              backendRefs:
                - name: ${service.metadata.name}
                  port: ${schema.spec.httpPort}
